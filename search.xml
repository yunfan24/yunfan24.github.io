<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringBoot中使用自定义注解和拦截器实现简单的权限控制</title>
      <link href="/posts/f512793/"/>
      <url>/posts/f512793/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>众所周知，作为系统的最后一道防线，对于一些重要操作（crud等），后端默认接收的所有的请求都是“不可信”的，除了确认用户登录状态之外，还要对接收的数据进行一系列的合法性校验等等，即使已经在前端页面对用户输入信息做了一定的限制。因为请求可以伪造，也可能被拦截篡改，即使在正常情况下，用户也可能因为误操作或者恶意行为发送不合法的请求。</p><span id="more"></span><p>如果多角色系统的接口不做权限校验的话，那无疑是在“裸奔”，任何一个普通的登录用户都能调用所有的接口。</p><blockquote><p>Q:什么是权限控制？</p><p>A:让特定的用户只能访问特定的资源。</p></blockquote><p>在实际项目中，如果权限控制需要复杂的逻辑或者需要非常细致的权限划分，可能需要借助专门的权限框架，主流的权限框架有</p><ul><li><p><strong>Spring Security</strong> <a href="https://spring.io/projects/spring-security">https://spring.io/projects/spring-security</a></p><p>Spring Security 是一个功能强大、高度可定制的身份验证和访问控制框架。它是确保基于 Spring 的应用程序安全的事实标准。<br>Spring Security 是一个专注于为 Java 应用程序提供身份验证和授权的框架。与所有 Spring 项目一样，Spring Security 的真正威力在于它可以轻松扩展以满足自定义需求</p></li><li><p><strong>Apache Shiro</strong> <a href="https://shiro.apache.org/">https://shiro.apache.org/</a></p><p>Apache Shiro™ 是一个功能强大且易于使用的 Java 安全框架，可执行身份验证、授权、加密和会话管理。利用 Shiro 易于理解的 API，您可以快速、轻松地保护任何应用程序的安全–从最小的移动应用程序到最大的网络和企业应用程序。</p></li></ul><p>虽然上述的框架功能十分完备，但是对于只有两三个角色的系统来说，杀鸡焉用宰牛刀啊，通过使用SpringBoot框架提供的自定义注解和拦截器功能，可以轻松地实现对不同用户角色的访问权限控制。</p><p>本文用例说明：</p><p>系统有三种角色，管理员、教师、学生。</p><p>在数据库用户表中，用户类型字段以tinyint存储，3代表管理员，2代表教师，1代表学生。</p><p>功能需求：有些接口只能管理员访问，有些接口可以让管理员和老师访问，有些接口只能学生访问。</p><h2 id="定义权限常量"><a href="#定义权限常量" class="headerlink" title="定义权限常量"></a>定义权限常量</h2><p>在项目下新建constant包，并新建接口用于定义角色权限常量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserConstant</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">USER_TYPE_ADMIN</span> <span class="operator">=</span> <span class="number">3</span>; <span class="comment">// 管理员</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">USER_TYPE_TEACHER</span> <span class="operator">=</span> <span class="number">2</span>; <span class="comment">// 教师</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">USER_TYPE_STUDENT</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">// 学生</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">USER_TYPE_LOGIN</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 登录未认证身份用户</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义Access注解"><a href="#定义Access注解" class="headerlink" title="定义Access注解"></a>定义Access注解</h2><p>新建annotation包，在包下新建一个Access注解，用于权限控制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Access &#123;</span><br><span class="line">    <span class="type">int</span>[] roles() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新建权限拦截器"><a href="#新建权限拦截器" class="headerlink" title="新建权限拦截器"></a>新建权限拦截器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 权限拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccessInterceptor</span> <span class="keyword">extends</span> <span class="title class_">HandlerInterceptorAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(handler <span class="keyword">instanceof</span> HandlerMethod)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">HandlerMethod</span> <span class="variable">handlerMethod</span> <span class="operator">=</span> (HandlerMethod) handler;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> handlerMethod.getMethod();</span><br><span class="line">        <span class="type">Access</span> <span class="variable">access</span> <span class="operator">=</span> method.getAnnotation(Access.class);</span><br><span class="line">        <span class="comment">//如果role是空的，说明不需要权限，直接放行</span></span><br><span class="line">        <span class="keyword">if</span> (access.roles().length == <span class="number">0</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;access &quot;</span> + method.getName() + <span class="string">&quot;role是空的&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果是指定角色（们）才能访问的权限</span></span><br><span class="line">        <span class="comment">//获取登录用户信息的方法</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> ......&lt;补全&gt;.......;</span><br><span class="line">        <span class="comment">//如果用户类型在权限数组中，说明权限足够</span></span><br><span class="line">        <span class="keyword">if</span> (Arrays.asList(access.roles()).contains(user.getType())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            response.setStatus(<span class="number">403</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注册拦截器"><a href="#注册拦截器" class="headerlink" title="注册拦截器"></a>注册拦截器</h2><p>将权限拦截器添加到登录拦截器后面，拦截器将会在请求处理过程中按照它们被添加的顺序依次执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestInterceptor</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AccessInterceptor accessInterceptor;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">// 登录拦截器</span></span><br><span class="line">        <span class="comment">// registry.addInterceptor(loginInterceptor);</span></span><br><span class="line">        registry.addInterceptor(accessInterceptor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在controller方法上加注解"><a href="#在controller方法上加注解" class="headerlink" title="在controller方法上加注解"></a>在controller方法上加注解</h2><p>在需要进行权限校验的接口方法上使用<code>@Access</code>，在注解数组中填入之前定义的常量即可，例如下面的例子表示只有学生用户和管理员用户才可以访问接口。如果没有标记权限注解，或者注解中数组为空，则不会验证该接口请求的权限。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="meta">@Access(roles = &#123;UserConstant.USER_TYPE_STUDENT,UserConstant.USER_TYPE_ADMIN&#125;)</span></span><br><span class="line"><span class="keyword">public</span> BaseResponse&lt;List&lt;Activity&gt;&gt; <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//统一返回结果类，返回统一格式的响应</span></span><br><span class="line">    <span class="keyword">return</span> ResultUtil.success(activityService.list());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实现了一种在注解中枚举角色的权限控制方法，可以实现简单而灵活的权限控制，保护我们的应用程序免受未经授权的访问。这样使用数组定义注解，好处是自定义程度高，可以指定哪（几）个角色，从而更加精细的控制访问权限，缺点是用户角色较多时，注解添加会比较麻烦。</p><p>如果权限划分是分层级的话（例如：<strong>超级无敌</strong>管理员&gt;超级管理员&gt;普通管理员，高权限用户可以向下访问低权限用户的所有接口，低权限用户不能向上访问），可以将注解里的roles改成整形，并修改权限拦截器，将判定条件修改成比较权限值的大小，只要用户的权限的数值高于接口权限就放行。</p>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注解 </tag>
            
            <tag> 权限控制 </tag>
            
            <tag> 拦截器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写给软件234，也给两年前的自己</title>
      <link href="/posts/20a80768/"/>
      <url>/posts/20a80768/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>首先对大家在上次班会长达1小时的坚持表示感谢，因时间有限，准备仓促，部分内容可能没有准确完整的传达给大家，因此以这样的形式复盘一遍。</p><span id="more"></span><p>下面内容根据大家近期反馈的内容并结合我的自身经历，可能有部分我经常说，但是不同时期的你看，可能会有不同的理解。</p><p>在你看这篇文章之前，我会默认你是一个有上进心的人。因为你既然能点进来，那么你就是可以的。</p><p><em>注意，本篇内容均为我自己的理解和经验，我只会述说我切身的体会和认识，我写的不是指南，不是计划表，也不一定完全是对的，我写的只是一些话，一些可能帮助你的话</em></p><h2 id="关于上学期班级整体情况"><a href="#关于上学期班级整体情况" class="headerlink" title="关于上学期班级整体情况"></a>关于上学期班级整体情况</h2><p>一句话，咱们<strong>最乖</strong>且<strong>挂科最少</strong>，整体最棒，但平均成绩还有提升空间。</p><h2 id="关于自己的生涯规划"><a href="#关于自己的生涯规划" class="headerlink" title="关于自己的生涯规划"></a>关于自己的生涯规划</h2><p>很多大学生的四年可能是这么过的</p><p>大一：好不容易上大学了，好好休息休息吧，开摆开摆</p><p>大二：开始有点迷茫焦虑，不知道自己是该参加比赛还是卷绩点还是准备找工作，一边迷茫一边摆，通常情况是晚上下定决心明天一定要发奋图强，第二天醒来一切照旧</p><p>大三：周围的人怎么都开始忙起来了，要不我现在开始准备找工作&#x2F;读研吧，但是还没意识到危机感</p><p>大四：棒子打在身上觉得痛了，开始考研&#x2F;找工作</p><p>这是不是一份好的规划呢？我想大家心里有答案，没有人不想要更好的未来。</p><p>从后往前看，这四年里</p><p>大四下，准备毕业设计毕业论文；大四上，专业实训或者外出实习，选择考研的话同时要备考；</p><p>大三可以视为一个关键节点，因为要确定自己的方向，在一边学习课程的同时，准备迎接相应的考核。</p><p>那大一大二该做什么就很容易看出了，为大三的选择打下基础，为日后的厚积薄发做准备。具体而言，无非就是，想保研使劲卷绩点、考各种证书、寻找各种加分项，想考公或者走选调生就多在学生组织积累经验，想考研就打好英语数学专业课基础，想直接找工作就在技术方面多倾斜、积累实习经验······这些平时也经常跟你们说，这里就不再费口舌。</p><p>不要以迷茫为借口而无所事事，你有大把的事情可以去做。</p><p>最后，现阶段（大一）并不着急确定详细的规划，当然，越早的确定清晰的方向，就能越早的在对应方向积累。但也会因为前期的认知不足导致错误的选择。总之，至少需要知道，哪些是重要的哪些是不重要的，哪些对你有用，哪些你并不需要。例如，不管是打算考研还是毕业直接找工作，只要想在本专业发展的话，打好专业课基础就是必要的；有保研打算的话，绩点是重要的；想找工作的话，积累实习经验是重要的。个人建议，在还不明确要做什么的时候，也就是大一这一年，成绩尽可能的高、计算机相关的技术也尽量多的学、学生工作也积累着经验、竞赛也尽量参加，不要一开始就把路走窄了。</p><h2 id="关于如何学习专业知识"><a href="#关于如何学习专业知识" class="headerlink" title="关于如何学习专业知识"></a>关于如何学习专业知识</h2><p>计算机专业的知识可能多且复杂，技术的更新迭代快，短时间内了解全面是很困难的，那如何开始第一步呢？</p><p>在多数人看来，课堂上讲的知识可能枯燥无味不实用，跟你想象的开发手机app，做游戏相差甚远，如此一来，逐渐丧失了对计算机专业的兴趣。</p><p>既然这样，不如先不看底层，以自顶向下的方式去学习。先做出个小玩意，譬如一个属于自己的网站，就像你正在看我的网站一样，Github上面有不少项目对新手十分友好，有些甚至只需要一行命令就能傻瓜式部署，你只需要复制粘贴回车，看着黑窗口里的代码滚动完就能体会到满满的成就感。在此过程中，可能会发现自己的盲区，这时就会有相对更加充足的动力去学习相关方面内容，因为你的目的不是学完一整本书，而是解决一个小问题。</p><p>例如，如果你还不了解内网外网的概念，你会疑问为什么网站在你的电脑能访问，而别人看不到。</p><blockquote><p>（非广告）<a href="https://university.aliyun.com/">阿里云高校学生权益</a>，可领取300元代金券换取服务器</p></blockquote><p>经过一通搜索，你拥有了一台自己的服务器，可是又发现了问题，别的网站地址都是 baidu.com这样，你的是一串类似192.168.1.11这样的数字，再去搜索引擎转一转，你会认识到域名、以及DNS解析的概念。慢慢的还会接触到HTTP、TCP、IP，再往后会遇到操作系统、编译原理等基础知识，这些随便拎出来一个足够让你昏昏欲睡的名词，在此刻慢慢的有了概念。直到某天你甚至可以推测出某些东西的存在，并且它具有什么样作用。例如，通过了解超文本传输协议（HTTP，HyperText Transfer Protocol），互联网上应用最为广泛的一种网络协议，你知道HTTP 协议是以明文方式发送信息的，不免思考，http报文以明文的方式在网络上传输，那传输的内容被中间人截获了怎么办？</p><p>想象一下，你向喜欢的人发送“我喜欢你，做我女朋友吧”</p><p>对方收到后，回复“好呀，我答应了”</p><p>不巧，一名黑客截获了回复，并更改成“你是个好人，我已经有喜欢的人了”并发送给你</p><p>从此，世界上少了一对真爱······</p><p>那如何保证客户端跟服务器之间的通信安全呢？</p><p>简单，加密就完了，约定一个密码，双方发送信息都加密后再发送，收到信息之后用约定的密码解密。</p><p>比如跟他&#x2F;她约定好，“今天天气真不错！”<strong>代表</strong>“一会去一块去图书馆学习等着我！”，这样每次要出去学习时，发送“今天天气真好”，别人就看不懂你们在说什么。</p><p>跟你的crush当然可以这么做。</p><p>那你的客户端跟服务器怎么约定密码，密码本身不也得通过网络传输吗，除非你千里迢迢到服务器旁边把密码告诉他，回来你俩再进行通信。</p><p>听起来不太现实，那https是怎么解决传输的安全问题呢？</p><p>上述的加密方法其实是对称加密，即这把钥匙既能开锁又能解锁，有一种加密方式是非对称加密，密钥是成对的，公钥加密的内容只能由私钥解密。</p><p><em>“！那我知道了，https是用非对称加密实现的！”</em></p><p>不完全对，其实是用两种方式混合实现的。</p><blockquote><p>欲知后事如何请看<a href="https://cloud.tencent.com/developer/article/1601995">终于有人把 HTTPS 原理讲清楚了！</a></p></blockquote><p>就这样一边玩一边学，等到后来系统学习计算机网络这本书时，你将会发现书里到处都有你认识的影子。</p><p>慢慢的，当对计算机整个体系有了整体的印象之后，你就能意识到自己需要系统学习哪些方面的知识。</p><p>当然，无论最后采取什么样的方式，答案只有三个字，先去学。</p><blockquote><p>Q:我不知道该怎么下手该怎么办？</p><p>A:除了搜索引擎，还有一种更为简单的方式——人工智能，你可以问他任何问题，他不会嘲笑你的问题有多么简单、幼稚，虽然机器的回答有时比较呆，但对于开拓未知的领域还是很有帮助的。下面是百度文心一言的回答示例，你可以继续追问不理解的内容</p></blockquote><p><img src="https://i.zzrl.cc/img/image-20240315163318547.webp" alt="image-20240315163318547"></p><p>大学以后，从书上能学来的东西越来越少，尤其是计算机专业，大量最新资源依托于互联网，书的出版速度可能赶不上技术的迭代。搜索引擎，社区论坛，开源源码，官方文档或者询问人工智能，这才是你要学习的东西。</p><h2 id="培养独立解决问题的能力"><a href="#培养独立解决问题的能力" class="headerlink" title="培养独立解决问题的能力"></a>培养独立解决问题的能力</h2><p>学习过程中不免会遇到各种各样的问题，反过来想，如果人人都能实现，那你的价值何在，解决问题的能力本身也是考核的一部分。</p><p>Debug，被誉为贯穿程序员一生的必备开发技能。有些同学非常害怕编译运行时大片的Error，其实这些正是最容易解决的错误，因为编译器已经告诉你哪里错了；业务逻辑、功能上的bug才是最难排查的，这时就需要调试程序一步步排查问题所在。每个同学都应该掌握自己调试程序的能力，而不是简单尝试后，拍照，将问题转发给别人。</p><blockquote><p><a href="https://cloud.tencent.com/developer/article/1887019">IDEA中的debug断点调试技巧</a></p></blockquote><p>其他问题，例如，为Java配置环境变量，这类问题就更简单了，题目即答案，搜索关键词<code>Java配置环境变量</code>，这么多教程，总有一个你能复现。</p><blockquote><p>很多事情别人帮助了你，要说谢谢，因为没有人有义务帮助你。</p></blockquote><p>在学校，有热心的老师学长学姐同学会给你解答问题，这终究是依赖自身之外的力量，具有一定的不可靠性。况且，自己解决问题，能够节省大量的沟通时间，提高效率，避免问题解决但是自己的热度已经褪去。</p><p>但这并不是说问别人问题是有罪的，我只是说类似配置环境变量这样的问题，并不是需要大动干戈的难事，如果这个都穷尽了你所有的方法，你可能很难追赶别人的步伐。换句话说，询问问题应该获取到如何渔而不仅仅是一时的鱼。</p><h2 id="持之以恒"><a href="#持之以恒" class="headerlink" title="持之以恒"></a>持之以恒</h2><p>编程，需要有耐心，如果你想很快的有一个非常炫酷的软件，那么，我只能说你有点好高骛远了。</p><p>不必去羡慕别人的软件多么酷炫，画面多么好看，我们要看的是我们的进步，我们的基础，基础最重要，有一个好的基础，你可以不懂什么流行名词，可以不懂什么高级的算法技术，因为一个好的基础，可以让你很快，非常快的学习这些东西，这些东西无非就是我们所学习的基础搭建出来的。</p><p>所以，认真地踏实地去学习，不用太着急，只要有进步就行。</p><p>千万不要像背单词一样，今天特别激动，从头开始背了几十个，之后遇到瓶颈搁置了几天，一段时间后又心血来潮，继续从abandon开始背。</p><p>另外，万事开头难，允许自己先做出一个垃圾，之后再慢慢打磨优化，完美主义固然没错，但有时会产生过多的压力阻挡你迈出第一步。</p><h2 id="如何打破信息茧房"><a href="#如何打破信息茧房" class="headerlink" title="如何打破信息茧房"></a>如何打破信息茧房</h2><p>你能意识到信息差的存在，就已经打破一半了。</p><p>上述的各种工具、方法，为什么有些你都没听过，反思一下自己是不是一直处于被动接收的状态，从未主动寻找，每天刷的短视频、各种信息流即是获取信息的主要来源，同样是刷视频，每个人刷到的也是不一样的，平台有严谨的算法推算你喜欢什么样的内容，久而久之，形成了信息闭塞。看一下你的搜索记录，是“某某女教师xxx大瓜”还是“java学习路线”？</p><p>话说回来，只是被动的接收我给你们传递的信息，也是一种信息茧房，本文既能打破你得信息茧房，亦能成为你得信息茧房。我的一些言行大概率会一定程度上影响你们的走向，所以，认识更多的学长学姐，了解更多不同的看法，多跟指导老师交流，拓宽自己的眼界。从大学的第一天开始，你就必须从被动转向主动，你必须成为自己未来的主人，你必须积极地管理自己的学业和将来的事业，理由很简单：因为没有人比你更在乎你自己的工作与生活。“让大学生活对自己有价值”是你的责任。</p><p>从被动接收信息转变为主动搜集信息，信息茧房不攻自破。</p><p><img src="https://i.zzrl.cc/img/IMG_20220709_193030.webp" alt="IMG_20220709_193030"></p><h2 id="提前了解行业形势"><a href="#提前了解行业形势" class="headerlink" title="提前了解行业形势"></a>提前了解行业形势</h2><p>此部分内容可能比较适合对软件感兴趣想在本专业就业的同学。</p><p>最然才大一，可以适当了解一下行业形势，下载一个招聘App，看一下自己心仪岗位的要求，思考一下以后想在哪个城市发展等等。</p><p><strong>准备一部分简历</strong>，好的简历不是一次写出来的，而是慢慢优化，随着自己经历的增加，会有越来越多的荣誉、经历可以写在上面。反之，若是你的简历一篇空白，没有什么可以写，那就明白应该做点什么事情了。</p><blockquote><p> 双非的我们如何能进大厂？</p></blockquote><p>相信学计算机的大家，一定早就对百度、字节跳动、阿里巴巴、腾讯这之类的大厂有所耳闻，其实，咱们中的人进入大厂，也并不是一个不切实际的梦想。但是对于咱们来说，想进大厂需要有过硬的实力，才能弥补学历的差距。大厂重视考察基础、算法，可从以下方面着手准备：</p><ul><li><strong>算法</strong>：尽早养成刷题的习惯。<a href="https://leetcode.cn/">（LeetCode）</a>可以顺道参加个蓝桥杯等比赛。</li><li><strong>实习</strong>：充分利用假期时间，积累多段实习经验，快一点的话大二暑假就可以去实习。</li><li><strong>计算机基础</strong>：计算机网络，数据结构，计算机组成原理，操作系统。</li><li><strong>项目</strong>：有两个自己拿的出手的项目写在简历上，而不是常见的增删改查类。</li><li>开源项目贡献：成为一个Star数相当多的开源项目活跃贡献者还是很加分的。</li><li>竞赛：反正是要学习的知识，顺道拿个奖，也不用花过多时间准备。</li><li>个人博客：你的文章是你最好的自我介绍。</li></ul><p><strong>上述这些并不是到了要找工作才开始准备，现在这个时间点，就必须着手开始了。</strong></p><p>这里，我并没有准确全面的信息告诉大家，因为我也没在大厂待过，我只能在你们那里种下一颗种子，剩下的靠你们自己去探索。我就等着有朝一日，你们中有人进了大厂把我内推过去（狗头）。</p><h2 id="挖坑"><a href="#挖坑" class="headerlink" title="挖坑"></a>挖坑</h2><p>一鼓作气，再而衰，三而竭。今天是第三天，写不下去了，目前先这样吧，大家可以按下<code>ctrl+D</code>收藏一下,时不时回来看看，后期可能还会补充新的内容。</p><p>过一段时间之后再来看，可能会有不同的收获。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>稍微了解一点搜索技巧，能用谷歌就用谷歌（可以找到镜像网站），其次是Bing加ADGUARD插件，尽量避免使用百度，用对方法往往能缩短数倍的时间。</p><blockquote><p><a href="https://zzrl.cc/posts/ff1f1596/">如何高效检索信息：搜索引擎使用小技巧</a></p></blockquote><p>经常看看github，掘金这类技术社区，没准有你感兴趣的。</p><p>保持谦虚。</p><p>计划可能赶不上变化，比如这篇文章为什么这个点发给你（狗头）。</p><p>不要太老实，一直跟着老师教的走完很有可能毕业即失业。</p><p>自己主动寻找一下哪些比赛可以参加，并不是所有的比赛都有人通知组织建群。（赛氪APP）</p><p>图书馆对面的外文楼有个小食堂，在图书馆一直待着学习的话，可以去那吃饭，能节省大量时间。</p><p>不要让自己太闲了，哪怕是出去玩一圈，也比在宿舍躺一整天好，抓住有限的时间，让自己的学习、生活更加精彩。</p><p>保持天真，在小孩眼里，我们是大人；在大人眼里，我们是小孩；带着稚气，带着困惑，带着自信，带着理想上路吧！</p><p>好记性不如烂笔头，灵感往往都是瞬间浮现，不妨记一下。</p><p>好好利用在公共场合说话的机会，展示或者锻炼。别怕丢人，那是一种成功的尝试，不要笑话那些上台丢人的人。</p><p>并不是每个人都像你一样热爱学习，并不是每个人都像你一样心底里拥有不甘心的勇气。当感觉周围环境阻碍你的进步时，踏出舒适的小环境，去和更加优秀的人接触。</p><p>找到自己的兴趣，最轻松的事情就是做自己喜欢的事情，并不是听音乐、画画之类的才是爱好，刷题也有可能上瘾，<strong>计算机专业毕业之后不只有写代码做程序员一条路。</strong>前端、后端、测试、运维、网络空间安全（最接近黑客）都可以选择，前期可以广泛涉猎寻找自己感兴趣的方向。实在不行，大一把成绩搞好，还可以转专业呢。</p><h2 id="写在最最后"><a href="#写在最最后" class="headerlink" title="写在最最后"></a>写在最最后</h2><p><img src="https://i.zzrl.cc/img/IMG_20240316_141435.webp" alt="日落" title="2024.3 济南 摄：myq"></p><hr><p>我的大学即将迎来日落，而你、你们的太阳才刚刚升起。</p><hr><p><img src="https://i.zzrl.cc/img/IMG_20240315_192650.webp" alt="日出" title="2023.8 泰山"></p><hr><p>祝你，前程似锦，一帆风顺。 ——软件234学生导员</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>一些关键词，可能能够拓宽你的视野：软著，软考，暑期实习，markdown，Github，选调生，leetcode、洛谷、ACwing、数学建模、爬虫、教师资格证、抓包、想到再补</p><p>一些可能对你有用的资源</p><ul><li><a href="https://erdengk.top/archives">erdengk</a></li><li><a href="https://blog.csdn.net/qq_51808107">請你喝杯Java</a></li><li><a href="https://bigbigni.github.io/">爱吃芝士的土豆倪</a></li><li><a href="https://space.bilibili.com/74568474">guangju_dev</a></li><li><a href="https://space.bilibili.com/1653229811">01星球</a></li><li><a href="https://www.bilibili.com/read/cv15665346/">尚硅谷2022年Java学习路线</a></li><li><a href="https://www.xiaolincoding.com/">小林coding</a></li><li><a href="https://www.kkdaxue.com/">框框大学</a></li><li><a href="https://www.wdbyte.com/">未读代码</a>、</li><li><a href="https://www.hello-algo.com/">Hello算法</a></li><li><a href="https://leetcode.cn/">leetcode</a></li><li><a href="https://www.nowcoder.com/">牛客</a></li><li><a href="https://maimai.cn/">脉脉</a></li><li>想到再补</li></ul><blockquote><p>致谢：</p><p>本文部分内容参考自以下文章</p><ul><li><p><a href="https://www.zhihu.com/question/61372181/answer/374758518">计算机知识的学习应该是自顶向下还是自底向上？</a></p></li><li><p><a href="https://blog.csdn.net/linglian0522/article/details/52544112">送给大一新生的一些话</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/546316867">写给新大一计算机类新生的建议</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/496106738">写给即将步入大一的计算机新生的一些经验之谈</a></p></li><li><p><a href="https://yufengbiji.com/posts/a-letter-to-my-freshman-self">写给计算机专业大一自己的一封信</a></p></li><li><p><a href="http://www.nimt.edu.cn/xueshengchu/2014/1024/c183a16069/page.htm">给大一新生的25条建议</a></p></li><li><p><a href="https://juejin.cn/post/7277804250037682235">计算机专业大学四年应该怎么过？早点看到这篇文章就好了</a></p></li></ul></blockquote><p>最后编辑于2024.3.17 00:51</p>]]></content>
      
      
      <categories>
          
          <category> 软件234 </category>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Linux上创建新用户并配置SSH免密连接</title>
      <link href="/posts/d4439880/"/>
      <url>/posts/d4439880/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么要创建新用户？"><a href="#为什么要创建新用户？" class="headerlink" title="为什么要创建新用户？"></a>为什么要创建新用户？</h2><ol><li><strong>权限控制</strong>：每个用户可以被赋予特定的权限，以限制其对系统资源的访问。创建新用户可以根据需要为其分配适当的权限，从而提高系统安全性，即使账户被窃取，也能将损失控制在限定的范围内。<span id="more"></span></li><li><strong>隔离环境</strong>：通过创建新用户，可以隔离不同用户之间的环境，避免彼此之间的干扰和冲突。</li><li><strong>跟踪活动</strong>：每个用户的活动都可以被追踪和记录，有助于监控系统的安全性和运行情况。</li></ol><h2 id="创建新用户的方法"><a href="#创建新用户的方法" class="headerlink" title="创建新用户的方法"></a>创建新用户的方法</h2><h3 id="1-使用命令行创建新用户"><a href="#1-使用命令行创建新用户" class="headerlink" title="1. 使用命令行创建新用户"></a>1. 使用命令行创建新用户</h3><p>在Linux系统中，可以使用<code>useradd</code>命令来创建新用户。</p><blockquote><p><code>adduser</code>也可以创建新用户，二者区别可以参考<a href="https://blog.csdn.net/li_101357/article/details/46778827">useradd 与adduser的区别</a></p></blockquote><p>例如，本文以用户<code>newuser</code>为例，使用如下命令创建一个名为<code>newuser</code>的用户，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd newuser</span><br></pre></td></tr></table></figure><p>系统将提示您输入新用户的密码和其他信息。按照提示输入即可完成新用户的创建。</p><h3 id="2-设置用户密码"><a href="#2-设置用户密码" class="headerlink" title="2. 设置用户密码"></a>2. 设置用户密码</h3><p>使用<code>passwd</code>命令来为新用户设置密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd newuser</span><br></pre></td></tr></table></figure><h3 id="3-授予新用户sudo权限（可选）"><a href="#3-授予新用户sudo权限（可选）" class="headerlink" title="3. 授予新用户sudo权限（可选）"></a>3. 授予新用户sudo权限（可选）</h3><p>如果需要给新用户添加sudo权限，这里以Ubuntu 22.04LTS为例，可以使用下面其中一个方法：</p><h4 id="（推荐）可直接将新用户添加到sudo用户组"><a href="#（推荐）可直接将新用户添加到sudo用户组" class="headerlink" title="（推荐）可直接将新用户添加到sudo用户组"></a>（推荐）可直接将新用户添加到sudo用户组</h4><p>使用以下命令将新创建的用户添加到sudo 组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser newuser sudo</span><br></pre></td></tr></table></figure><p>要<strong>撤销</strong>用户的 sudo 权限（例如 newuser），可以执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo deluser newuser sudo</span><br></pre></td></tr></table></figure><h4 id="（较为麻烦）修改sudoers文件"><a href="#（较为麻烦）修改sudoers文件" class="headerlink" title="（较为麻烦）修改sudoers文件"></a>（较为麻烦）修改sudoers文件</h4><p>打开 <code>/etc</code> 目录下的 <code>sudoers</code> 文件，在 <code>root ALL=(ALL) ALL</code> 语句下添加 <code>newuser ALL=(ALL) ALL</code> 。</p><p>可以使用sftp工具直接更改后上传，也可以使用vim，下面是vim的操作方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行</span></span><br><span class="line">sudo vim /etc/sudoers</span><br></pre></td></tr></table></figure><p>按i在当前光标处进入编辑模式</p><p>使用方向键移动光标，在root ALL&#x3D;(ALL) ALL语句下添加一行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newuser ALL=(ALL) ALL</span><br></pre></td></tr></table></figure><p>按一下<code>esc</code>，即退出编辑模式；</p><p>输入英文状态下的冒号<code>:</code>；</p><p>之后输入wq后回车，即保存并退出；</p><p>如果遇到提示<code>E45:readonly&#39;option is set (add to override)</code>无法保存修改，输入<code>:wq!</code>即可。</p><p>如果修改错误需要丢弃修改，<code>esc</code>输入冒号后，输入<code>q!</code>回车，即不保存退出。</p><blockquote><p>vim使用方法<a href="https://www.runoob.com/linux/linux-vim.html">菜鸟教程Linux vi&#x2F;vim</a></p></blockquote><p>要验证用户是否已添加到 sudo 组中，请运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo -l -U &lt;username&gt;</span><br><span class="line"><span class="comment"># 例如</span></span><br><span class="line"><span class="comment"># sudo -l -U newuser</span></span><br></pre></td></tr></table></figure><p>输出以下内容代表有sudo权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">匹配 %2<span class="variable">$s</span> 上 %1<span class="variable">$s</span> 的默认条目：</span><br><span class="line">    env_reset, mail_badpass,</span><br><span class="line">    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin, use_pty</span><br><span class="line"></span><br><span class="line">用户 newuser 可以在 xiaoxin-virtual-machine 上运行以下命令：</span><br><span class="line">    (ALL : ALL) ALL</span><br></pre></td></tr></table></figure><h3 id="4-客户端生成SSH密钥对"><a href="#4-客户端生成SSH密钥对" class="headerlink" title="4.客户端生成SSH密钥对"></a>4.客户端生成SSH密钥对</h3><p>SSH密钥对由公钥和私钥组成，私钥保存在客户端，而公钥保存在服务器端。</p><p>相较于用户名和密码认证方式，使用SSH密钥对认证方式具有以下优势：</p><ul><li>安全性：使用SSH密钥对登录认证更为安全可靠。<ul><li>SSH密钥对安全强度远高于常规用户口令，可以杜绝暴力破解威胁。</li><li>无法通过公钥推导出私钥。</li></ul></li><li>便捷性：<ul><li>如果您将公钥配置在Linux实例中，那么，在本地或者另外一台实例中，您可以无需输入密码，直接使用私钥通过SSH命令或相关工具登录。</li><li>支持远程登录大量Linux实例。如果您需要批量维护多台Linux实例，可以使用这种方式登录。</li></ul></li></ul><p>打开cmd，使用<code>ssh-keygen</code>命令在客户端生成SSH密钥对：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;填入邮箱&quot;</span><br></pre></td></tr></table></figure><p>按照提示，选择保存密钥的位置和设置密钥的密码。</p><p>打开保存密钥对的文件夹，用记事本打开.pub结尾的文件，<code>ctrl+A</code>全选，<code>ctrl+C</code>复制内容。</p><h3 id="5-将公钥复制到服务器"><a href="#5-将公钥复制到服务器" class="headerlink" title="5. 将公钥复制到服务器"></a>5. 将公钥复制到服务器</h3><p>打开 <code>/home/newuser/.ssh </code>目录下的<code>authorized_keys</code> 文件，如果不存在就新建对应目录和文件，将之前生成的公钥文件中的所有内容复制进去，保存。</p><p>vim命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /home/newuser/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>按i进入编辑模式，粘贴刚才复制的公钥内容<br>ECS    :wq保存退出，或:wq!</p><h3 id="6-修改服务器新用户目录权限以及所有权"><a href="#6-修改服务器新用户目录权限以及所有权" class="headerlink" title="6.修改服务器新用户目录权限以及所有权"></a>6.修改服务器新用户目录权限以及所有权</h3><ol><li><p>为公钥文件和文件夹设置权限。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 /home/newuser/.ssh/authorized_keys</span><br><span class="line">chmod 700 /home/newuser/.ssh</span><br></pre></td></tr></table></figure><p><strong>chmod</strong>命令可设置文件或文件夹的权限，三位数字为linux中的权限代码，介绍及教程：<a href="https://www.runoob.com/linux/linux-comm-chmod.html">菜鸟教程 Linux chmod命令</a>。</p></li><li><p>将<code>/home/newuser</code>文件夹及其子文件夹、子文件所有权移交给git用户。</p><p><strong>! 漏掉此步骤可能会导致登录新用户时提示<code>/home</code>下该用户目录不存在或者用户不存在导致无法登录</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R newuser:newuser /home/newuser</span><br></pre></td></tr></table></figure><p>chown命令可以变更目录或文件的所有者，-R参数是对子目录及其内的所有文件生效。</p></li></ol><h2 id="尝试进行SSH免密连接"><a href="#尝试进行SSH免密连接" class="headerlink" title="尝试进行SSH免密连接"></a>尝试进行SSH免密连接</h2><p>完成以上步骤后，就可以使用SSH免密连接登录到服务器了。在客户端命令行中使用以下命令登录到服务器，将your_server_ip替换成你的服务器IP地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh newuser@your_server_ip</span><br></pre></td></tr></table></figure><p>系统将使用您生成的密钥对进行身份验证，若配置成功，无需输入密码即可登录到服务器。</p><h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><p>在上述步骤中，可以从“sudo”组中删除用户以取消其sudo权限。但是用户仍然存在于系统中。要从 Linux 系统中完全删除用户，请以 root 或 sudo 用户身份登录并运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo deluser &lt;username&gt;</span><br></pre></td></tr></table></figure><p>如果要删除用户及其主目录，请运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo deluser -r &lt;username&gt;</span><br></pre></td></tr></table></figure><p>若出现<code>userdel: user xxxxx is currently used by process 10997</code></p><p>杀掉该进程即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkill 10997</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> SSH </tag>
            
            <tag> sudo </tag>
            
            <tag> vim </tag>
            
            <tag> 秘钥对 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何高效检索信息：搜索引擎使用小技巧</title>
      <link href="/posts/ff1f1596/"/>
      <url>/posts/ff1f1596/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在当今信息爆炸的时代，搜索引擎已经成为我们获取信息的主要途径之一。 平时我们使用搜索引擎，通常是将关键字输入搜索框后回车，然后开始从上到下翻阅有用的信息。其实搜索引擎提供了多种语法，合理使用这些语法，能够帮助我们更加快速的找到有效信息。</p><span id="more"></span><p>本文将介绍一些常用的搜索语法，以帮助您更有效地获取信息。</p><h2 id="1-或-AND"><a href="#1-或-AND" class="headerlink" title="1. + 或 AND"></a>1. + 或 AND</h2><p>“与”，搜索包含多个关键词的结果</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">健康 +饮食</span><br></pre></td></tr></table></figure><p>返回同时包含“健康”和“饮食”的结果。</p><h2 id="2-OR-或"><a href="#2-OR-或" class="headerlink" title="2. OR 或 |"></a>2. OR 或 |</h2><p>或者</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">游戏 OR 电影</span><br></pre></td></tr></table></figure><p>返回包含“游戏”或“电影”的结果。</p><h2 id="3"><a href="#3" class="headerlink" title="3. -"></a>3. -</h2><p>用于排除包含特定的关键词的结果。</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">水果 -苹果</span><br></pre></td></tr></table></figure><p>返回包含“水果”但不包含“苹果”的结果。</p><h2 id="4-“”"><a href="#4-“”" class="headerlink" title="4. “”"></a>4. “”</h2><p>用于精确匹配引号内的短语，即搜索结果中必须包含引号内的词。</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“人工智能发展史”</span><br></pre></td></tr></table></figure><p>返回包含完整短语“人工智能发展史”的结果。</p><h2 id="5"><a href="#5" class="headerlink" title="5. *"></a>5. *</h2><p>占位符，可以表示一连串字符。</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">平凡* 名著</span><br></pre></td></tr></table></figure><p>直接搜索<code>平凡 名著</code>,搜索结果可能包含《平凡》这本书，而搜索<code>平凡* 名著</code>前几个结果均为《平凡的世界》</p><h2 id="6-filetype"><a href="#6-filetype" class="headerlink" title="6. filetype"></a>6. filetype</h2><p>用于搜索特定类型的文件，搜索结果均为指定格式的文件。</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx报告 filetype:pdf</span><br></pre></td></tr></table></figure><p>返回xxx报告的PDF格式结果。</p><h2 id="7-site"><a href="#7-site" class="headerlink" title="7. site"></a>7. site</h2><p>用于限制搜索结果来自特定网站。</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">site:wikipedia.org 太阳系</span><br></pre></td></tr></table></figure><p>返回来自维基百科的关于“太阳系”的结果。</p><h2 id="8-info"><a href="#8-info" class="headerlink" title="8. info"></a>8. info</h2><p>获取关于特定网站的信息。</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info:github.com</span><br></pre></td></tr></table></figure><p>返回有关github网站的信息。</p><h2 id="9-related"><a href="#9-related" class="headerlink" title="9. related"></a>9. related</h2><p>查找与指定网站类似的网站。</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">related:github.com</span><br></pre></td></tr></table></figure><p>返回类似于github的其他网站。</p><h2 id="10-inurl"><a href="#10-inurl" class="headerlink" title="10. inurl"></a>10. inurl</h2><p>用于在URL中查找包含某个特定关键词的结果。</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inurl:weather 北京</span><br></pre></td></tr></table></figure><p>返回URL中包含“weather”并且和“北京”相关的结果。</p><h2 id="11-intitle"><a href="#11-intitle" class="headerlink" title="11. intitle"></a>11. intitle</h2><p>搜索标题中包含某个特定关键词的页面。</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">intitle:冬奥会</span><br></pre></td></tr></table></figure><p>返回标题中包含“冬奥会”的页面。</p><h2 id="12-intext"><a href="#12-intext" class="headerlink" title="12. intext"></a>12. intext</h2><p>搜索页面正文中包含某个特定关键词的页面。</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">intext:全球变暖</span><br></pre></td></tr></table></figure><p>这将返回正文中包含“全球变暖”的页面。</p><h2 id="13-allinurl"><a href="#13-allinurl" class="headerlink" title="13. allinurl"></a>13. allinurl</h2><p>查找URL中包含所有指定关键词的页面。</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allinurl:美食 推荐</span><br></pre></td></tr></table></figure><p>返回URL中包含“美食”和“推荐”的页面。</p><h2 id="14-allintitle"><a href="#14-allintitle" class="headerlink" title="14. allintitle"></a>14. allintitle</h2><p>查找标题中包含所有指定关键词的页面。</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allintitle:科技 创新</span><br></pre></td></tr></table></figure><p>返回标题中包含“科技”和“创新”的页面。</p><h2 id="15-allintext"><a href="#15-allintext" class="headerlink" title="15. allintext"></a>15. allintext</h2><p>查找正文中包含所有指定关键词的页面。</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allintext:健康 饮食</span><br></pre></td></tr></table></figure><p>返回正文中包含“健康”和“饮食”的页面。</p><p><em>注：</em></p><p><em>1.冒号需要使用英文状态的,且冒号后面没有空格；</em></p><p><em>2.指令前面需要用空格与关键字隔开，如<code>平凡的世界 filetype:pdf</code>，filetype前面有空格；</em></p><h2 id="这么多用法记不住怎么办"><a href="#这么多用法记不住怎么办" class="headerlink" title="这么多用法记不住怎么办"></a>这么多用法记不住怎么办</h2><p>不用担心，搜索引擎对应有高级搜索界面，例如谷歌高级搜索（<a href="https://www.google.com/advanced_search%EF%BC%89%EF%BC%8C%E5%9C%A8%E5%AF%B9%E5%BA%94%E8%BE%93%E5%85%A5%E6%A1%86%E4%B8%AD%E8%BE%93%E5%85%A5%E5%85%B3%E9%94%AE%E8%AF%8D%E5%8D%B3%E5%8F%AF">https://www.google.com/advanced_search），在对应输入框中输入关键词即可</a></p><p><img src="https://i.zzrl.cc/img/image-20240307161547764.webp" alt="image-20240307161547764"></p><p>附：百度高级搜索（<a href="https://www.baidu.com/gaoji/advanced.html%EF%BC%89">https://www.baidu.com/gaoji/advanced.html）</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索语法 </tag>
            
            <tag> 搜索引擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>远程连接终端——WindTerm安装使用教程</title>
      <link href="/posts/f682a309/"/>
      <url>/posts/f682a309/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在使用xshell时，偶尔需要传输一下文件。然而，由于Xshell和Xftp是分开的，这就有些不太方便。于是找到了这个集SSH和SFTP一体的工具——WindTerm。开源免费，跨平台，支持 Windows、Linux 和 macOS，启动速度快。除此之外还有命令提示补全功能（根据历史命令）。</p><span id="more"></span><p>官方介绍</p><blockquote><p>A Quicker and better SSH&#x2F;Telnet&#x2F;Serial&#x2F;Shell&#x2F;Sftp client for DevOps.</p><p>WindTerm是一个更快、更好的SSH&#x2F;Telnet&#x2F;Serial&#x2F;Shell&#x2F;SFTP客户端，专为DevOps而设计。<br>预览图</p></blockquote><p><img src="https://i.zzrl.cc/img/image-20240304105603054.webp" alt="image-20240304105603054"></p><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>开源项目，<a href="https://github.com/kingToolbox/WindTerm/releases">官方下载地址</a>，截止文章编辑时，Star数19.5k。</p><p>以win11为例，下载x86_64版本，解压缩后点击<code>WindTerm.exe</code>即可使用</p><h2 id="使用配置"><a href="#使用配置" class="headerlink" title="使用配置"></a>使用配置</h2><h3 id="锁屏密码"><a href="#锁屏密码" class="headerlink" title="锁屏密码"></a>锁屏密码</h3><p>WindTerm有30分钟锁定机制，闲置30分钟之后需要输入密码解锁，安装好后要首先设置一个密码，点击主界面右下角锁屏-更改主密码，旧密码留空，输入新密码、确认密码后点击更改即可。</p><p>也可以设置关闭自动锁屏，会话-首选项-设置-安全-锁屏-锁屏超时输入<code>0</code> 回车即可。</p><p>如果感觉每次输入密码太麻烦，可以到软件安装目录<code>WindTerm_2.x.x\ .wind\profiles\default.v10</code>中找到<code>user.config</code>文件，修改<code>application.masterPassword</code> 为<code>false</code>，重新启动，之后遇到密码界面，回车即可</p><h3 id="新建会话"><a href="#新建会话" class="headerlink" title="新建会话"></a>新建会话</h3><p>点击会话-新建会话，以ssh为例</p><ol><li><p>填写主机ip</p></li><li><p>选择端口</p></li><li><p>设置分组</p></li></ol><p>这里与Xshell不同，连接的用户名并不在会话中填写，而是与Onekey绑定，故这里只需填写主机和端口。</p><p><img src="https://i.zzrl.cc/img/image-20240304102815814.webp" alt="image-20240304102815814"></p><p><strong>OneKey</strong>，类似xshell中的用户密钥管理，或者浏览器的密码管理器，用于集中存放用户的认证凭据。首次设置，点击输入框中的设置图标，点击左下角设置OneKey管理器密码，设置好之后，点击左下角加号即可添加，之后选择对应onekey连接即可。</p><p><img src="https://i.zzrl.cc/img/IOXbED2ZMinSusd-1708400331284-25.webp" alt="image-20240217102929048"></p><h3 id="界面设置"><a href="#界面设置" class="headerlink" title="界面设置"></a>界面设置</h3><p>日常使用时，可能有很多功能用不到，实际最多使用的也就SSH是和文件管理，可以根据使用习惯把不需要的都关掉，节省屏幕空间。</p><img src="https://i.zzrl.cc/img/j8yD6N4A2vYTzMq.webp" alt="image-20240217103043313" style="zoom: 67%;" /><p>右上角专注模式旁边的按钮，点击即可设置界面，可以按照自己喜好保留、关闭菜单，按照上面图中设置，效果如下</p><p><img src="https://i.zzrl.cc/img/bRBqvfSI238KZeL.webp" alt="image-20240217103157950"></p><h3 id="自动复制"><a href="#自动复制" class="headerlink" title="自动复制"></a>自动复制</h3><p>会话-首选项-设置-文本-自动复制选定内容 即可开启自动复制，开启后在命令行中选中文本即可自动复制到剪切板。</p><p><img src="https://i.zzrl.cc/img/j7TxwJZ3rEHPpof.webp" alt="image-20240217103216844"></p><h3 id="会话空闲保活"><a href="#会话空闲保活" class="headerlink" title="会话空闲保活"></a>会话空闲保活</h3><p>长时间无操作闲置会话，可能会导致主机断开连接，造成命令行界面卡住，可以开启会话保活，在会话-首选项-默认会话设置-SSH-连接-发送空包以保持会话活动，设置15，即15秒自动发空包保持会话存活。</p><h2 id="其他内容"><a href="#其他内容" class="headerlink" title="其他内容"></a>其他内容</h2><p>在连接新装系统的主机时，如果遇到无法连接的情况，检查ssh服务是否安装并启动，可以使用<code>systemctl status ssh</code> 查看ssh状态，效果如下</p><p><img src="https://i.zzrl.cc/img/image-20240220114000634.webp" alt="image-20240220114000634"></p><p>若无ssh服务，ubuntu系统下，执行<code>sudo apt install openssh-server</code> 安装ssh服务后即可连接。</p><p>如果ssh服务没有问题，请检查防火墙是不是没有放行相应端口，新建会话时填写的ip地址是否正确。</p><p>使用过程中，若遇到软件方面的其他问题，可在<a href="https://github.com/kingToolbox/WindTerm/issues">官方仓库Issues</a>尝试寻找解决方案。</p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 安装教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
